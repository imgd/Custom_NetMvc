<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyMVC</name>
    </assembly>
    <members>
        <member name="T:MyMVC.SessionMode">
            <summary>
            Action所支持的Session模式
            </summary>
        </member>
        <member name="F:MyMVC.SessionMode.NotSupport">
            <summary>
            不支持
            </summary>
        </member>
        <member name="F:MyMVC.SessionMode.Support">
            <summary>
            全支持
            </summary>
        </member>
        <member name="F:MyMVC.SessionMode.ReadOnly">
            <summary>
            仅支持读取
            </summary>
        </member>
        <member name="P:MyMVC.SessionModeAttribute.SessionMode">
            <summary>
            要支持的Session模式
            </summary>
        </member>
        <member name="T:MyMVC.ActionAttribute">
            <summary>
            将一个方法标记为一个Action
            </summary>
        </member>
        <member name="P:MyMVC.ActionAttribute.Verb">
            <summary>
            允许哪些访问动词，与web.config中的httpHanlder的配置意义一致。
            </summary>
        </member>
        <member name="M:MyMVC.ResponseWriter.WritePage(System.String,System.Object,System.Boolean)">
            <summary>
            用指定的Page以及视图数据呈现结果（HTML），
            然后将产生的HTML代码写入HttpContext.Current.Response
            用户控件应从MyPageView&lt;T&gt;继承
            </summary>
            <param name="pageVirtualPath">Page的虚拟路径</param>
            <param name="model">视图数据</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="M:MyMVC.ResponseWriter.WriteUserControl(System.String,System.Object,System.Boolean)">
            <summary>
            用指定的用户控件以及视图数据呈现结果（HTML），
            然后将产生的HTML代码写入HttpContext.Current.Response
            用户控件应从MyUserControlView&lt;T&gt;继承
            </summary>
            <param name="ucVirtualPath">用户控件的虚拟路径</param>
            <param name="model">视图数据</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="M:MyMVC.ResponseWriter.WriteUserControl(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            用指定的用户控件以及视图数据呈现结果（HTML），
            并生成一段代码，用于将生成的HTML替换哪个DOM节点，
            然后将所有产生的HTML代码写入HttpContext.Current.Response
            用户控件应从MyUserControlView&lt;T&gt;继承
            </summary>
            <param name="ucVirtualPath">用户控件的虚拟路径</param>
            <param name="model">视图数据</param>
            <param name="targetDomId">需要将输出内容替换哪个DOM节点的内容</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="M:MyMVC.ResponseWriter.WriteHtml(System.String,System.Boolean)">
            <summary>
            将指定的HTML代码写入HttpContext.Current.Response
            </summary>
            <param name="html">要写入的HTML文本</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="M:MyMVC.SerializerHelper.ToJson(System.Object)">
            <summary>
            将对象执行JSON序列化
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>JSON序列化的结果</returns>
        </member>
        <member name="M:MyMVC.SerializerHelper.DeserializeFromJson``1(System.String)">
            <summary>
            从JSON字符串中反序列化对象
            </summary>
            <typeparam name="T">反序列化的结果类型</typeparam>
            <param name="json">JSON字符串</param>
            <returns>反序列化的结果</returns>
        </member>
        <member name="M:MyMVC.SerializerHelper.ToXml(System.Object)">
            <summary>
            将对象执行XML序列化
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>XML序列化的结果</returns>
        </member>
        <member name="M:MyMVC.SerializerHelper.DeserializeFromXml``1(System.String)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <typeparam name="T">反序列化的结果类型</typeparam>
            <param name="json">XML字符串</param>
            <returns>反序列化的结果</returns>
        </member>
        <member name="M:MyMVC.XmlHelper.XmlSerialize(System.Object,System.Text.Encoding)">
            <summary>
            将一个对象序列化为XML字符串
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="encoding">编码方式</param>
            <returns>序列化产生的XML字符串</returns>
        </member>
        <member name="M:MyMVC.XmlHelper.XmlSerializeToFile(System.Object,System.String,System.Text.Encoding)">
            <summary>
            将一个对象按XML序列化的方式写入到一个文件
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="path">保存文件路径</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:MyMVC.XmlHelper.XmlDeserialize``1(System.String,System.Text.Encoding)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="s">包含对象的XML字符串</param>
            <param name="encoding">编码方式</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:MyMVC.XmlHelper.XmlDeserializeFromFile``1(System.String,System.Text.Encoding)">
            <summary>
            读入一个文件，并按XML的方式反序列化对象。
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="path">文件路径</param>
            <param name="encoding">编码方式</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="T:MyMVC.PageUrlAttribute">
            <summary>
            用于描述一个Action可以处理哪些请求路径。
            注意：这个Attribute可以多次使用，表示可以处理多个请求路径。
            </summary>
        </member>
        <member name="P:MyMVC.PageUrlAttribute.Url">
            <summary>
            指示可以处理的请求路径。比如："/abc.aspx" 
            </summary>
        </member>
        <member name="F:MyMVC.TestEnvironment.IsTestEnvironment">
            <summary>
            当前运行环境是否为测试环境（非ASP.NET环境）
            </summary>
        </member>
        <member name="T:MyMVC.AuthorizeAttribute">
            <summary>
            用于验证用户身份的修饰属性
            </summary>
        </member>
        <member name="P:MyMVC.AuthorizeAttribute.Users">
            <summary>
            允许访问的用户列表，用逗号分隔。
            </summary>
        </member>
        <member name="P:MyMVC.AuthorizeAttribute.Roles">
            <summary>
            允许访问的角色列表，用逗号分隔。
            </summary>
        </member>
        <member name="T:MyMVC.MyBasePage">
            <summary>
            一个基于“System.Web.UI.Page”的类
            </summary>
        </member>
        <member name="P:MyMVC.MyBasePage.RequestUrlEncodeRawUrl">
            <summary>
            当前页面的请求地址。
            已经过UrlEncode()处理，用于构造URL中的一部分。
            </summary>
        </member>
        <member name="M:MyMVC.UrlHelper.GetRealVirtualPath(System.Web.HttpContext,System.String)">
            <summary>
            获取实际的虚拟路径，如果网站部署在虚拟目录中，将去除虚拟目录的顶层目录名。
            </summary>
            <param name="context">HttpContext实例的引用</param>
            <param name="virtualPath">可能包含虚拟目录的虚拟路径</param>
            <returns>去除虚拟目录后的实际虚拟路径。</returns>
        </member>
        <member name="T:MyMVC.MyBaseUserControl">
            <summary>
            一个“用户控件”基类
            </summary>
        </member>
        <member name="T:MyMVC.PageResult">
            <summary>
            表示一个页面结果（页面将由框架执行）
            </summary>
        </member>
        <member name="T:MyMVC.HttpContextHelper">
            <summary>
            用于访问当前请求上下文的工具类。这个类对测试环境仍然有效。
            </summary>
        </member>
        <member name="P:MyMVC.HttpContextHelper.AppRootPath">
            <summary>
            return HttpRuntime.AppDomainAppPath;
            </summary>
        </member>
        <member name="P:MyMVC.HttpContextHelper.RequestFilePath">
            <summary>
            return HttpContext.Current.Request.FilePath;
            </summary>
        </member>
        <member name="P:MyMVC.HttpContextHelper.RequestRawUrl">
            <summary>
            return HttpContext.Current.Request.RawUrl;
            </summary>
        </member>
        <member name="P:MyMVC.HttpContextHelper.UserIdentityName">
            <summary>
            return HttpContext.Current.User.Identity.Name;
            </summary>
        </member>
        <member name="M:MyMVC.ReflectionExtensions2.IsSupportableType(System.Type)">
            <summary>
            判断是否是一个可支持的参数类型。仅包括：基元类型，string ，decimal，DateTime，Guid, string[], 枚举
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.ReflectionExtensions2.GetRealType(System.Type)">
            <summary>
            得到一个实际的类型（排除Nullable类型的影响）。比如：int? 最后将得到int
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MyMVC.ServiceHandlerFactory">
            <summary>
            响应服务请求的HttpHandlerFactory。它要求将所有Action放在一个以Service结尾的类型中。
            </summary>
        </member>
        <member name="T:OptimizeReflection.ReflectionExtensions">
            <summary>
            一些扩展方法，用于反射操作，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:MyMVC.PageExecutor.Render(System.Web.HttpContext,System.String,System.Object)">
            <summary>
            用指定的页面路径以及视图数据呈现结果，最后返回生成的HTML代码。
            页面应从MyPageView&lt;T&gt;继承
            </summary>
            <param name="context">HttpContext对象</param>
            <param name="pageVirtualPath">Page的虚拟路径</param>
            <param name="model">视图数据</param>
            <returns>生成的HTML代码</returns>
        </member>
        <member name="M:MyMVC.PageExecutor.ResponseWrite(System.String,System.Object,System.Boolean)">
            <summary>
            用指定的Page以及视图数据呈现结果，
            然后将产生的HTML代码写入HttpContext.Current.Response
            用户控件应从MyPageView&lt;T&gt;继承
            </summary>
            <param name="pageVirtualPath">Page的虚拟路径</param>
            <param name="model">视图数据</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="T:MyMVC.VoidType">
            <summary>
            表示在Action的参数列表中，不需要赋值值的类型，用于区分重载方法
            </summary>
        </member>
        <member name="T:OptimizeReflection.IGetValue">
            <summary>
            定义读属性操作的接口
            </summary>
        </member>
        <member name="T:OptimizeReflection.ISetValue">
            <summary>
            定义写属性操作的接口
            </summary>
        </member>
        <member name="T:OptimizeReflection.GetterSetterFactory">
            <summary>
            创建IGetValue或者ISetValue实例的工厂方法类
            </summary>
        </member>
        <member name="M:OptimizeReflection.GetterSetterFactory.CreatePropertyGetterWrapper(System.Reflection.PropertyInfo)">
            <summary>
            根据指定的PropertyInfo对象，返回对应的IGetValue实例
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:OptimizeReflection.GetterSetterFactory.CreatePropertySetterWrapper(System.Reflection.PropertyInfo)">
            <summary>
            根据指定的PropertyInfo对象，返回对应的ISetValue实例
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:OptimizeReflection.PropertyExtensions">
            <summary>
            一些扩展方法，用于访问属性，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:OptimizeReflection.PropertyExtensions.FastGetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            快速调用PropertyInfo的GetValue方法
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OptimizeReflection.PropertyExtensions.FastSetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            快速调用PropertyInfo的SetValue方法
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:MyMVC.RedirectResult">
            <summary>
            表示一个重定向的结果
            </summary>
        </member>
        <member name="T:MyMVC.JsonResult">
            <summary>
            一个Json对象结果
            </summary>
        </member>
        <member name="M:MyMVC.ViewTypeParserFilter.PreprocessDirective(System.String,System.Collections.IDictionary)">
            <summary>
            预处理：页面，用户控件上的指令
            </summary>
        </member>
        <member name="M:MyMVC.UiHelper.RefJsFileHtml(System.String)">
            <summary>
            生成一个引用JS文件的HTML代码，其中URL包含了文件的最后更新时间。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.UiHelper.RefCssFileHtml(System.String)">
            <summary>
            生成一个引用CSS文件的HTML代码，其中URL包含了文件的最后更新时间。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MyMVC.StringExtensions">
            <summary>
            用于UI输出方面的常用字符串扩展
            </summary>
        </member>
        <member name="M:MyMVC.StringExtensions.HtmlEncode(System.String)">
            <summary>
            将字符串转换为 HTML 编码的字符串。
            </summary>
            <param name="str">要编码的字符串。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:MyMVC.StringExtensions.HtmlAttributeEncode(System.String)">
            <summary>
            将字符串最小限度地转换为 HTML 编码的字符串。
            </summary>
            <param name="str">要编码的字符串。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:MyMVC.StringExtensions.IsSame(System.String,System.String)">
            <summary>
            判断二个字符串是否相等，忽略大小写的比较方式。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.StringExtensions.SplitTrim(System.String,System.Char[])">
            <summary>
            等效于 string.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries)
            且为每个拆分后的结果又做了Trim()操作。
            </summary>
            <param name="value">要拆分的字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.StringExtensions.ToTitleCase(System.String)">
            <summary>
            将字符串的首个英文字母大写
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:MyMVC.HttpValueIgnoreAttribute">
            <summary>
            用于指示不要用Http请求中的内容给一些实体成员赋值。
            </summary>
        </member>
        <member name="M:MyMVC.ReflectionHelper.InitControllers">
            <summary>
            加载所有的Controller
            </summary>
        </member>
        <member name="M:MyMVC.ReflectionHelper.GetServiceController(System.String)">
            <summary>
            根据要调用的controller名返回对应的Controller 
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.ReflectionHelper.GetServiceAction(System.Type,System.String,System.Web.HttpRequest)">
            <summary>
            根据要调用的方法名返回对应的 Action 
            </summary>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.ReflectionHelper.GetActionInvokeInfo(MyMVC.ControllerActionPair,System.Web.HttpRequest)">
            <summary>
            根据一个Action的调用信息（类名与方法名），返回内部表示的调用信息。
            </summary>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.ReflectionHelper.GetActionInvokeInfo(System.String)">
            <summary>
            根据一个页面请求路径，返回内部表示的调用信息。
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.ReflectionHelper.GetModelDescripton(System.Type)">
            <summary>
            返回一个实体类型的描述信息（全部属性及字段）。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.ReflectionHelper.GetMemberByName(System.Type,System.String,System.Boolean)">
            <summary>
            返回一个实体类型的指定名称的数据成员
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MyMVC.UcExecutor">
            <summary>
            用于呈现（Render）用户控件的执行器
            </summary>
        </member>
        <member name="M:MyMVC.UcExecutor.Render(System.String,System.Object)">
            <summary>
            用指定的用户控件以及视图数据呈现结果，最后返回生成的HTML代码。
            用户控件应从MyUserControlView&lt;T&gt;继承
            </summary>
            <param name="ucVirtualPath">用户控件的虚拟路径</param>
            <param name="model">视图数据</param>
            <returns>生成的HTML代码</returns>
        </member>
        <member name="M:MyMVC.UcExecutor.ResponseWrite(System.String,System.Object,System.Boolean)">
            <summary>
            用指定的用户控件以及视图数据呈现结果，
            然后将产生的HTML代码写入HttpContext.Current.Response
            用户控件应从MyUserControlView&lt;T&gt;继承
            </summary>
            <param name="ucVirtualPath">用户控件的虚拟路径</param>
            <param name="model">视图数据</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="T:MyMVC.MyPageView`1">
            <summary>
            页面视图的基类
            </summary>
            <typeparam name="TModel">传递给页面呈现时所需的数据实体对象类型</typeparam>
        </member>
        <member name="P:MyMVC.MyPageView`1.Model">
            <summary>
            用于页面呈现时所需的数据实体对象
            </summary>
        </member>
        <member name="T:MyMVC.MyBaseMasterPage">
            <summary>
            MasterPage基类
            </summary>
        </member>
        <member name="M:MyMVC.MvcPageHandlerFactory.TryGetHandler(System.Web.HttpContext)">
            <summary>
            尝试根据当前请求，获取一个有效的Action，并返回ActionHandler
            此方法可以在HttpModule中使用，用于替代httpHandler的映射配置
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.ModelHelper.FillModel(System.Web.HttpRequest,System.Object,System.String)">
            <summary>
            根据HttpRequest填充一个数据实体。
            这里不支持嵌套类型的数据实体，且要求各数据成员都是简单的数据类型。
            </summary>
            <param name="request"></param>
            <param name="model"></param>
        </member>
        <member name="M:MyMVC.ModelHelper.GetHttpValues(System.Web.HttpRequest,System.String)">
            <summary>
            读取一个HTTP参数值。这里只读取QueryString以及Form
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.ModelHelper.GetStringImplicit(System.Type)">
            <summary>
            判断指定的类型是否能从String类型做隐式类型转换，如果可以，则返回相应的方法
            </summary>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="T:MyMVC.MyUserControlView`1">
            <summary>
            基于用户控件的视图基类，这类用户控件只是用于呈现数据。
            </summary>
            <typeparam name="TModel">传递给用户控件呈现时所需的数据实体对象类型</typeparam>
        </member>
        <member name="P:MyMVC.MyUserControlView`1.Model">
            <summary>
            用于页面呈现时所需的数据实体对象
            </summary>
        </member>
        <member name="T:MyMVC.AjaxHandlerFactory">
            <summary>
            响应AJAX请求的HttpHandlerFactory。它要求将所有Action放在一个以Ajax开头的类型中。
            </summary>
        </member>
        <member name="T:OptimizeReflection.IInvokeMethod">
            <summary>
            定义了通用的方法调用接口
            </summary>
        </member>
        <member name="T:OptimizeReflection.MethodInvokerFactory">
            <summary>
            创建IInvokeMethod实例的工厂类
            </summary>
        </member>
        <member name="M:OptimizeReflection.MethodInvokerFactory.CreateMethodInvokerWrapper(System.Reflection.MethodInfo)">
            <summary>
            根据指定的MethodInfo对象创建相应的IInvokeMethod实例。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:OptimizeReflection.MethodExtensions">
            <summary>
            一些扩展方法，用于快速调用方法，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:OptimizeReflection.MethodExtensions.FastInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            根据指定的MethodInfo以及参数数组，快速调用相关的方法。
            </summary>
            <param name="methodInfo"></param>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:OptimizeReflection.ReflectMethodBase`1">
            <summary>
            为了简化实现IInvokeMethod接口的抽象类，继承类只需要重写InvokeInternal方法即可。
            </summary>
            <typeparam name="TDelegate"></typeparam>
        </member>
        <member name="M:MyMVC.ActionExecutor.ExecuteAction(System.Web.HttpContext,MyMVC.ControllerActionPair)">
            <summary>
            执行一次Service调用请求。例如："/service/Order/AddOrder.cspx"
            </summary>
            <param name="context"></param>
            <param name="pair"></param>
        </member>
        <member name="M:MyMVC.ActionExecutor.ExecuteAction(System.Web.HttpContext,System.String)">
            <summary>
            执行指定的页面请求。例如："/Pages/Categories.aspx"
            </summary>
            <param name="context"></param>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="F:MyMVC.ActionExecutor.MvcVersion">
            <summary>
            MyMVC的版本。（dll文件版本）
            </summary>
        </member>
        <member name="T:MyMVC.CookieHelper">
            <summary>
            读写Cookie的辅助工具类。这个类对测试环境仍然有效。
            </summary>
        </member>
        <member name="M:MyMVC.CookieHelper.GetCookie(System.String)">
            <summary>
            从Request中获取一个Cookie对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.CookieHelper.GetCookieValue(System.String)">
            <summary>
            从Request中获取一个Cookie对象的值，如果不存在，则返回null
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MyMVC.CookieHelper.SetCookie(System.Web.HttpCookie)">
            <summary>
            将一个Cookie对应写入到Response中
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:MyMVC.CookieHelper.AddCookie(System.Web.HttpCookie)">
            <summary>
            将一个Cookie对应写入到Response中
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:MyMVC.CookieHelper.ClearCookie">
            <summary>
            清除所有写入的Cookie 
            </summary>
        </member>
        <member name="M:MyMVC.CookieHelper.RemoveCookie(System.String)">
            <summary>
            删除指定名称的Cookie
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:MyMVC.ViewType">
            <summary>
            ViewType
            </summary>
        </member>
        <member name="P:MyMVC.ViewType.TypeName">
            <summary>
            TypeName
            </summary>
        </member>
        <member name="T:MyMVC.UcResult">
            <summary>
            表示一个用户控件结果（用户控件将由框架执行）
            </summary>
        </member>
    </members>
</doc>
